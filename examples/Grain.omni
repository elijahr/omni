struct Grain:
    phase
    increment
    position
    length
    busy bool

struct Grains:
    max_num_grains int
    grains_data = Data[Grain](max_num_grains)

def trigger_new_grain(grains, length_audio_buffer, position_samples, position_range_samples, length_samples, length_range_samples, pitch, pitch_range):
    for grain in grains.grains_data:
        if not grain.busy:
            grain_pitch_range    = noise() * pitch_range
            grain_pitch          = pow(2, pitch + (grain_pitch_range / 12)) #semitone conversion

            grain_length_range   = noise() * length_range_samples
            grain_length         = length_samples + grain_length_range

            grain_position_range = noise() * position_range_samples
            grain_position       = clip(position_samples + grain_position_range, 0, length_audio_buffer)

            if grain_position + grain_length > length_audio_buffer:
                grain_length = (length_audio_buffer - 2) - grain_position #- 2 for linear interp

            if grain_length <= 0: continue

            grain_increment = (1 / grain_length) * grain_pitch
            
            grain.phase     = 0
            grain.increment = grain_increment
            grain.length    = grain_length
            grain.position  = grain_position
            grain.busy      = true

            return

def get_active_grains(grains, audio_buffer, window_buffer, stereo):
    out_value1 = 0; out_value2 = 0
    for grain in grains.grains_data:
        if grain.busy:
            phasor_audio_buffer  = (grain.phase * grain.length) + grain.position
            phasor_window_buffer = grain.phase * (window_buffer.length - 1)

            buffer_value = audio_buffer.read(phasor_audio_buffer)
            window_value = window_buffer.read(phasor_window_buffer)

            out_value1 += (buffer_value * window_value)

            if stereo:
                buffer_value = audio_buffer.read(1, phasor_audio_buffer)
                out_value2 += (buffer_value * window_value)

            grain.phase += grain.increment

            if grain.phase >= 1.0:
                grain.busy = false

    if stereo:
        return (out_value1, out_value2)
    else:
        return (out_value1, out_value1)
